original_vector <- c(1, 2, 3, 4, 5)
reversed_vector <- rev(original_vector)
print(reversed_vector)
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)
concatenated_vector <- c(vector1, vector2)
print(concatenated_vector)
given_vector <- c(10, 15, 20, 25, 30, 35, 40)
lower_limit <- 20
upper_limit <- 30
count_in_range <- sum(given_vector >= lower_limit & given_vector <= upper_limit)
print(count_in_range)
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)
combined_by_row <- rbind(vector1, vector2)
print(combined_by_row)
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)
combined_by_column <- cbind(vector1, vector2)
print(combined_by_column)
given_vector <- c(8, 12, 5, 18, 9)
result <- given_vector > 10
print(result)
my_list <- list(
strings = c("apple", "banana", "cherry"),
numbers = c(1, 2, 3),
vectors = c(4, 5, 6),
logical_value = TRUE
)
print(my_list)
my_complex_list <- list(
my_vector = c(10, 20, 30),
my_matrix = matrix(1:9, nrow = 3, ncol = 3),
my_inner_list = list(a = "alpha", b = "beta", c = "gamma")
)
first_element <- my_complex_list$my_vector
second_element <- my_complex_list$my_matrix
print(first_element)
print(second_element)
my_list <- list(vec1, vec2, vec3)
my_list <- list(vec1, vec2, vec3)
vec1 <- c(1, 2, 3)
vec2 <- c(4, 5, 6)
vec3 <- c(7, 8, 9)
my_list <- list(vec1, vec2, vec3)
my_matrix <- matrix(unlist(my_list), nrow = length(vec1), byrow = TRUE)
print("Original Vectors:")
print(vec1)
print(vec2)
print(vec3)
print(my_matrix)
my_matrix <- matrix(c(5, 8, 3, 12, 9, 4, 6, 15, 2), nrow = 3, byrow = TRUE)
submatrix <- my_matrix[apply(my_matrix, 1, function(row) any(row > 7)), ]
print("Original Matrix:")
print(my_matrix)
print(submatrix)
my_matrix <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, byrow = TRUE)
my_array <- as.vector(my_matrix)
print(my_matrix)
print(my_array)
my_vector <- 1:24
my_array <- array(my_vector, dim = c(4, 3, 2))
print("Original Vector:")
print(my_vector)
print(my_array)
name <- c("Alice", "Bob", "Charlie", "David")
age <- c(25, 30, 22, 35)
city <- c("New York", "San Francisco", "Chicago", "Los Angeles")
salary <- c(60000, 80000, 55000, 75000)
my_data_frame <- data.frame(Name = name, Age = age, City = city, Salary = salary)
print(my_data_frame)
summary_stats <- summary(my_data_frame)
data_structure <- str(my_data_frame)
print("Statistical Summary:")
print(summary_stats)
cat(data_structure)
selected_data <- my_data_frame[c(3, 5), c(1, 3)]
print("Original Data Frame:")
print(my_data_frame)
print(selected_data)
print("Original Data Frame:")
print(my_data_frame)
new_row <- c("Eva", 28, "Miami", 70000)
my_data_frame <- rbind(my_data_frame, new_row)
new_column <- c("HR", "IT", "Finance", "Marketing", "Operations")
my_data_frame$Department <- new_column
print(my_data_frame)
name = readline(prompt="Input your name: ")
print(paste("My name is",name, "and I am",age ,"years old."))
print(R.version.string)
name = readline(prompt="Input your name: ")
print(paste("My name is",name, "and I am",age ,"years old."))
print(R.version.string)
print("Sequence of numbers from 20 to 50:")
print(seq(20,50))
print("Mean of numbers from 20 to 60:")
print(mean(20:60))
print("Sum of numbers from 51 to 91:")
print(sum(51:91))
v = sample(-50:50, 10, replace=TRUE)
print("Content of the vector:")
print("10 random integer values between -50 and +50:")
print(v)
Fibonacci <- numeric(10)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
print("First 10 Fibonacci numbers:")
print(Fibonacci)
prime_numbers <- function(n) {
if (n >= 2) {
x = seq(2, n)
prime_nums = c()
for (i in seq(2, n)) {
if (any(x == i)) {
prime_nums = c(prime_nums, i)
x = c(x[(x %% i) != 0], i)
}
}
return(prime_nums)
}
else
{
stop("Input number should be at least 2.")
}
}
prime_numbers(12)
for (n in 1:100) {
if (n %% 3 == 0 & n %% 5 == 0) {print("FizzBuzz")}
else if (n %% 3 == 0) {print("Fizz")}
else if (n %% 5 == 0) {print("Buzz")}
else print(n)
}
print("First 10 letters in lower case:")
t = head(letters, 10)
print(t)
print("Last 10 letters in upper case:")
t = tail(LETTERS, 10)
print(t)
print("Letters between 22nd to 24th letters in upper case:")
e = tail(LETTERS[22:24])
print(e)
print(paste("The factors of",n,"are:"))
for(i in 1:n) {
if((n %% i) == 0) {
print(i)
}
}
}
ums = c(10, 20, 30, 40, 50, 60)
print('Original vector:')
print(nums)
nums = c(10, 20, 30, 40, 50, 60)
print('Original vector:')
print(nums)
print(paste("Maximum value of the said vector:",max(nums)))
print(paste("Minimum value of the said vector:",min(nums)))
savehistory("~/GitHub/charan/r-programming/labr(main).Rhistory")
